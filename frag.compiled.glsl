uniform vec2 resolution;
uniform vec3 objectColor;
uniform vec3 backgroundColor;
uniform vec3 baseLightColor;
uniform vec3 spotLightColor;
uniform vec3 spot2LightColor;
uniform float blobStickiness;
uniform float deformationFrequency;
uniform float deformationAmount;
uniform float halftoneGridSize;
uniform float halftoneSeparation;
uniform float halftonePrePower;
uniform float halftonePostPower;
uniform float halftoneMultiplier;
uniform float zoom;
uniform vec3 camera;
uniform vec4 objects[20];
void main ()
{
  highp vec3 color_1;
  highp vec2 modBase_2;
  vec2 offset45deg_3;
  highp vec2 uv_4;
  highp vec2 tmpvar_5;
  tmpvar_5 = (((gl_FragCoord.xy / resolution) * 2.0) - 1.0);
  uv_4.y = tmpvar_5.y;
  uv_4.x = (tmpvar_5.x * (resolution.x / resolution.y));
  offset45deg_3 = vec2(0.0, 0.0);
  highp float tmpvar_6;
  tmpvar_6 = (float(mod (floor((tmpvar_5.y * halftoneGridSize)), 2.0)));
  if ((tmpvar_6 == 0.0)) {
    offset45deg_3 = vec2(0.5, 0.0);
  };
  highp vec2 tmpvar_7;
  tmpvar_7 = (uv_4 * halftoneGridSize);
  highp vec2 tmpvar_8;
  tmpvar_8 = (vec2(mod (tmpvar_7, 1.0)));
  modBase_2 = tmpvar_8;
  if ((tmpvar_8.x > offset45deg_3.x)) {
    modBase_2 = (tmpvar_8 - offset45deg_3);
  } else {
    modBase_2 = (modBase_2 + offset45deg_3);
  };
  highp vec2 tmpvar_9;
  tmpvar_9 = (tmpvar_7 - modBase_2);
  highp vec2 tmpvar_10;
  tmpvar_10 = ((tmpvar_9 / halftoneGridSize) + (((vec2(-0.08, -0.05) * halftoneSeparation) + offset45deg_3) / halftoneGridSize));
  highp vec2 arg0_11;
  arg0_11 = ((uv_4 - (tmpvar_10 + (0.5 / halftoneGridSize))) + (offset45deg_3 / halftoneGridSize));
  highp vec2 arg0_12;
  arg0_12 = ((uv_4 - (((tmpvar_9 / halftoneGridSize) + (((vec2(0.0, 0.08) * halftoneSeparation) + offset45deg_3) / halftoneGridSize)) + (0.5 / halftoneGridSize))) + (offset45deg_3 / halftoneGridSize));
  highp vec2 arg0_13;
  arg0_13 = ((uv_4 - (((tmpvar_9 / halftoneGridSize) + (((vec2(0.08, -0.05) * halftoneSeparation) + offset45deg_3) / halftoneGridSize)) + (0.5 / halftoneGridSize))) + (offset45deg_3 / halftoneGridSize));
  highp vec3 tmpvar_14;
  tmpvar_14.x = (sqrt(dot (arg0_11, arg0_11)) * halftoneGridSize);
  tmpvar_14.y = (sqrt(dot (arg0_12, arg0_12)) * halftoneGridSize);
  tmpvar_14.z = (sqrt(dot (arg0_13, arg0_13)) * halftoneGridSize);
  uv_4 = tmpvar_10;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = tmpvar_10;
  tmpvar_15.z = zoom;
  bool tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = bool(0);
  highp vec3 tmpvar_18;
  tmpvar_18 = ((vec3(-7.0, -7.0, -10.0) - camera) / tmpvar_15);
  highp vec3 tmpvar_19;
  tmpvar_19 = ((vec3(7.0, 7.0, 2.0) - camera) / tmpvar_15);
  highp vec3 tmpvar_20;
  tmpvar_20 = max (tmpvar_19, tmpvar_18);
  highp vec3 tmpvar_21;
  tmpvar_21 = min (tmpvar_19, tmpvar_18);
  highp float tmpvar_22;
  tmpvar_22 = min (tmpvar_20.x, min (tmpvar_20.y, tmpvar_20.z));
  highp float tmpvar_23;
  tmpvar_23 = max (max (tmpvar_21.x, 0.0), max (tmpvar_21.y, tmpvar_21.z));
  if ((tmpvar_22 > tmpvar_23)) {
    highp vec3 tmpvar_24;
    tmpvar_24 = tmpvar_15;
    highp float val_25;
    bool tmpvar_26;
    bool tmpvar_27;
    tmpvar_27 = bool(0);
    int i_28;
    highp float left_29;
    highp vec3 point_30;
    highp float time_31;
    highp float step_32;
    step_32 = ((tmpvar_22 - tmpvar_23) / 15.0);
    time_31 = tmpvar_23;
    highp vec3 tmpvar_33;
    tmpvar_33 = (camera + (tmpvar_23 * tmpvar_15));
    point_30 = tmpvar_33;
    highp vec3 point_34;
    point_34 = tmpvar_33;
    int i_35;
    highp float distance_36;
    distance_36 = 0.0;
    i_35 = 0;
    for (int i_35 = 0; i_35 < 20; ) {
      highp vec3 tmpvar_37;
      tmpvar_37 = (point_34 - objects[i_35].xyz);
      distance_36 = (distance_36 + (objects[i_35].w / (((tmpvar_37.x * tmpvar_37.x) + (tmpvar_37.y * tmpvar_37.y)) + (tmpvar_37.z * tmpvar_37.z))));
      i_35 = (i_35 + 1);
    };
    highp float tmpvar_38;
    tmpvar_38 = ((((sin((deformationFrequency * tmpvar_33.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_33.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_33.z)) * deformationAmount)) + (blobStickiness - distance_36));
    distance_36 = tmpvar_38;
    left_29 = tmpvar_38;
    i_28 = 0;
    for (int i_28 = 0; i_28 < 15; ) {
      highp float tmpvar_39;
      tmpvar_39 = (time_31 + step_32);
      time_31 = tmpvar_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = (point_30 + (step_32 * tmpvar_24));
      point_30 = tmpvar_40;
      highp vec3 point_41;
      point_41 = tmpvar_40;
      int i_42;
      highp float distance_43;
      distance_43 = 0.0;
      i_42 = 0;
      for (int i_42 = 0; i_42 < 20; ) {
        highp vec3 tmpvar_44;
        tmpvar_44 = (point_41 - objects[i_42].xyz);
        distance_43 = (distance_43 + (objects[i_42].w / (((tmpvar_44.x * tmpvar_44.x) + (tmpvar_44.y * tmpvar_44.y)) + (tmpvar_44.z * tmpvar_44.z))));
        i_42 = (i_42 + 1);
      };
      highp float tmpvar_45;
      tmpvar_45 = ((((sin((deformationFrequency * tmpvar_40.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_40.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_40.z)) * deformationAmount)) + (blobStickiness - distance_43));
      distance_43 = tmpvar_45;
      if (((left_29 * tmpvar_45) < 0.0)) {
        val_25 = (tmpvar_39 + ((tmpvar_45 * step_32) / (left_29 - tmpvar_45)));
        tmpvar_26 = bool(1);
        tmpvar_27 = bool(1);
        break;
      };
      left_29 = tmpvar_45;
      i_28 = (i_28 + 1);
    };
    if (!(tmpvar_27)) {
      tmpvar_26 = bool(0);
      tmpvar_27 = bool(1);
    };
    if (tmpvar_26) {
      highp vec3 tmpvar_46;
      tmpvar_46 = (camera + (tmpvar_15 * val_25));
      highp vec3 point_47;
      point_47 = (tmpvar_46 + vec3(0.001, 0.0, 0.0));
      int i_48;
      highp float distance_49;
      distance_49 = 0.0;
      i_48 = 0;
      for (int i_48 = 0; i_48 < 20; ) {
        highp vec3 tmpvar_50;
        tmpvar_50 = (point_47 - objects[i_48].xyz);
        distance_49 = (distance_49 + (objects[i_48].w / (((tmpvar_50.x * tmpvar_50.x) + (tmpvar_50.y * tmpvar_50.y)) + (tmpvar_50.z * tmpvar_50.z))));
        i_48 = (i_48 + 1);
      };
      highp float tmpvar_51;
      tmpvar_51 = ((((sin((deformationFrequency * point_47.x)) * deformationAmount) * (sin((deformationFrequency * point_47.y)) * deformationAmount)) * (sin((deformationFrequency * point_47.z)) * deformationAmount)) + (blobStickiness - distance_49));
      distance_49 = tmpvar_51;
      highp vec3 point_52;
      point_52 = (tmpvar_46 - vec3(0.001, 0.0, 0.0));
      int i_53;
      highp float distance_54;
      distance_54 = 0.0;
      i_53 = 0;
      for (int i_53 = 0; i_53 < 20; ) {
        highp vec3 tmpvar_55;
        tmpvar_55 = (point_52 - objects[i_53].xyz);
        distance_54 = (distance_54 + (objects[i_53].w / (((tmpvar_55.x * tmpvar_55.x) + (tmpvar_55.y * tmpvar_55.y)) + (tmpvar_55.z * tmpvar_55.z))));
        i_53 = (i_53 + 1);
      };
      highp float tmpvar_56;
      tmpvar_56 = ((((sin((deformationFrequency * point_52.x)) * deformationAmount) * (sin((deformationFrequency * point_52.y)) * deformationAmount)) * (sin((deformationFrequency * point_52.z)) * deformationAmount)) + (blobStickiness - distance_54));
      distance_54 = tmpvar_56;
      highp vec3 point_57;
      point_57 = (tmpvar_46 + vec3(0.0, 0.001, 0.0));
      int i_58;
      highp float distance_59;
      distance_59 = 0.0;
      i_58 = 0;
      for (int i_58 = 0; i_58 < 20; ) {
        highp vec3 tmpvar_60;
        tmpvar_60 = (point_57 - objects[i_58].xyz);
        distance_59 = (distance_59 + (objects[i_58].w / (((tmpvar_60.x * tmpvar_60.x) + (tmpvar_60.y * tmpvar_60.y)) + (tmpvar_60.z * tmpvar_60.z))));
        i_58 = (i_58 + 1);
      };
      highp float tmpvar_61;
      tmpvar_61 = ((((sin((deformationFrequency * point_57.x)) * deformationAmount) * (sin((deformationFrequency * point_57.y)) * deformationAmount)) * (sin((deformationFrequency * point_57.z)) * deformationAmount)) + (blobStickiness - distance_59));
      distance_59 = tmpvar_61;
      highp vec3 point_62;
      point_62 = (tmpvar_46 - vec3(0.0, 0.001, 0.0));
      int i_63;
      highp float distance_64;
      distance_64 = 0.0;
      i_63 = 0;
      for (int i_63 = 0; i_63 < 20; ) {
        highp vec3 tmpvar_65;
        tmpvar_65 = (point_62 - objects[i_63].xyz);
        distance_64 = (distance_64 + (objects[i_63].w / (((tmpvar_65.x * tmpvar_65.x) + (tmpvar_65.y * tmpvar_65.y)) + (tmpvar_65.z * tmpvar_65.z))));
        i_63 = (i_63 + 1);
      };
      highp float tmpvar_66;
      tmpvar_66 = ((((sin((deformationFrequency * point_62.x)) * deformationAmount) * (sin((deformationFrequency * point_62.y)) * deformationAmount)) * (sin((deformationFrequency * point_62.z)) * deformationAmount)) + (blobStickiness - distance_64));
      distance_64 = tmpvar_66;
      highp vec3 point_67;
      point_67 = (tmpvar_46 + vec3(0.0, 0.0, 0.001));
      int i_68;
      highp float distance_69;
      distance_69 = 0.0;
      i_68 = 0;
      for (int i_68 = 0; i_68 < 20; ) {
        highp vec3 tmpvar_70;
        tmpvar_70 = (point_67 - objects[i_68].xyz);
        distance_69 = (distance_69 + (objects[i_68].w / (((tmpvar_70.x * tmpvar_70.x) + (tmpvar_70.y * tmpvar_70.y)) + (tmpvar_70.z * tmpvar_70.z))));
        i_68 = (i_68 + 1);
      };
      highp float tmpvar_71;
      tmpvar_71 = ((((sin((deformationFrequency * point_67.x)) * deformationAmount) * (sin((deformationFrequency * point_67.y)) * deformationAmount)) * (sin((deformationFrequency * point_67.z)) * deformationAmount)) + (blobStickiness - distance_69));
      distance_69 = tmpvar_71;
      highp vec3 point_72;
      point_72 = (tmpvar_46 - vec3(0.0, 0.0, 0.001));
      int i_73;
      highp float distance_74;
      distance_74 = 0.0;
      i_73 = 0;
      for (int i_73 = 0; i_73 < 20; ) {
        highp vec3 tmpvar_75;
        tmpvar_75 = (point_72 - objects[i_73].xyz);
        distance_74 = (distance_74 + (objects[i_73].w / (((tmpvar_75.x * tmpvar_75.x) + (tmpvar_75.y * tmpvar_75.y)) + (tmpvar_75.z * tmpvar_75.z))));
        i_73 = (i_73 + 1);
      };
      highp float tmpvar_76;
      tmpvar_76 = ((((sin((deformationFrequency * point_72.x)) * deformationAmount) * (sin((deformationFrequency * point_72.y)) * deformationAmount)) * (sin((deformationFrequency * point_72.z)) * deformationAmount)) + (blobStickiness - distance_74));
      distance_74 = tmpvar_76;
      highp vec3 tmpvar_77;
      tmpvar_77.x = (tmpvar_51 - tmpvar_56);
      tmpvar_77.y = (tmpvar_61 - tmpvar_66);
      tmpvar_77.z = (tmpvar_71 - tmpvar_76);
      tmpvar_16 = bool(1);
      tmpvar_17 = normalize(tmpvar_77);
    };
  };
  color_1 = backgroundColor;
  if (tmpvar_16) {
    highp vec3 refractionColor_78;
    highp vec3 tmpvar_79;
    highp float k_80;
    k_80 = (1.0 - ((1.0 - (dot (tmpvar_17, tmpvar_15) * dot (tmpvar_17, tmpvar_15))) * 0.9604));
    if ((k_80 < 0.0)) {
      tmpvar_79 = vec3(0.0, 0.0, 0.0);
    } else {
      tmpvar_79 = ((0.98 * tmpvar_15) - (((0.98 * dot (tmpvar_17, tmpvar_15)) + sqrt(k_80)) * tmpvar_17));
    };
    highp vec3 tmpvar_81;
    tmpvar_81 = normalize(tmpvar_79);
    highp float tmpvar_82;
    tmpvar_82 = dot (tmpvar_81, vec3(0.0, 2.0, 0.0));
    highp float tmpvar_83;
    tmpvar_83 = dot (tmpvar_81, vec3(-2.0, 0.5, 0.0));
    refractionColor_78 = ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_82) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_82) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_82) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_83) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_83) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)));
    highp vec3 tmpvar_84;
    tmpvar_84 = (refractionColor_78 * objectColor);
    refractionColor_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = normalize((tmpvar_15 - (2.0 * (dot (tmpvar_17, tmpvar_15) * tmpvar_17))));
    highp float tmpvar_86;
    tmpvar_86 = dot (tmpvar_85, vec3(0.0, 2.0, 0.0));
    highp float tmpvar_87;
    tmpvar_87 = dot (tmpvar_85, vec3(-2.0, 0.5, 0.0));
    color_1 = ((3.0 * (mix (tmpvar_84, ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_86) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_86) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_86) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_87) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_87) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.5) - vec3(0.5, 0.5, 0.5))) + vec3(0.5, 0.5, 0.5));
  };
  highp vec3 t_88;
  t_88.x = float((color_1.x >= 1.0));
  t_88.y = float((color_1.y >= 1.0));
  t_88.z = float((color_1.z >= 1.0));
  highp vec3 tmpvar_89;
  tmpvar_89 = mix (pow (clamp ((pow ((max (color_1, vec3(0.3, 0.3, 0.3)) * tmpvar_14), vec3(halftonePrePower)) * vec3(halftoneMultiplier)), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), vec3(halftonePostPower)), vec3(1.0, 1.0, 1.0), t_88);
  color_1 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90.w = 1.0;
  tmpvar_90.xyz = tmpvar_89;
  gl_FragColor = tmpvar_90;
}

